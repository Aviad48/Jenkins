pipeline {
    agent any

    environment {
        GITHUB_APP_CREDENTIALS_ID = '45458158-001d-4fe4-8ca9-8acafca9ff3f'
        GIT_USERNAME = 'aviad48'
        DOCKER_HUB_ID = 'e9cf8a4e-cf95-40f1-a76e-a368ae9cff2f'
        DOCKER_CONTAINER_NAME = 'my_app'
        DOCKER_IMAGE_NAME = "aviad539/cicd"
        PREVIOUS_BUILD_NUMBER = "${currentBuild.number - 1}"  // Get the previous build number
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the code from the 'development' branch
                    checkout([$class: 'GitSCM', branches: [[name: '*/Development']], userRemoteConfigs: [[url: 'https://github.com/Aviad48/Jenkins.git']]])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image with JENKINS_BUILD_NUMBER as a tag
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to Docker Hub 
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """echo \${DOCKER_PASSWORD} | docker login -u \${DOCKER_USERNAME} --password-stdin"""
                        sh "docker push ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    def imageName = "${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"

                    // Check if the container exists
                    def existingContainerId = sh(script: "docker ps -q -f name=${DOCKER_CONTAINER_NAME}", returnStdout: true).trim()

                    // Remove the container if it exists
                    if (existingContainerId) {
                        sh "docker rm -f ${DOCKER_CONTAINER_NAME}"
                    }

                    // Run Docker container in detached mode
                    sh "docker run -d --name ${DOCKER_CONTAINER_NAME} ${imageName}"
                }
            }
        }

        stage('Validate Application') {
            steps {
                script {
                    def appStatus = sh(script: "docker inspect --format='{{ .State.Running}}' ${DOCKER_CONTAINER_NAME}", returnStatus: true).trim()

                    if (appStatus != 'running') {
                        error "Application validation failed. Rolling back to the previous version."
                    }
                }
            }
        }

        stage('Auto Merge to Master') {
            steps {
                script {
                    try {
                        // Fetch the latest changes from origin/development
                        sh 'git fetch origin development'

                        //Update the local development branch
                        sh 'git checkout development'
                        sh 'git pull origin development --allow-unrelated-histories --no-ff'

                        // Switch to main (PROD)
                        sh 'git checkout main'

                        // Merge changes from 'development' branch
                        sh 'git merge --allow-unrelated-histories origin/development'
                        
                        // Configure Git with user name and email
                        sh 'git config --global user.name "aviad48"'
                        sh 'git config --global user.email "aviaddayan1991@gmail.com"'

                        // Push changes to 'main' branch
                        withCredentials([usernamePassword(credentialsId: GITHUB_APP_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            sh "git push -f https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Aviad48/Jenkins.git main"
                        }
                    } catch (Exception e) {
                        // Handle merge failure or check failures
                        echo "Error occurred while merging branches: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error "Failed to merge branches"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                catchError {
                    // Rollback in case of failure
                    echo 'Rolling back to the previous version...'
                    sh "docker stop ${DOCKER_CONTAINER_NAME}"
                    sh "docker rm -f ${DOCKER_CONTAINER_NAME}"
                    sh "docker run -d --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_NAME}:${PREVIOUS_BUILD_NUMBER}"  // Use the previous build number for tagging
                }
                sh 'git reset --hard HEAD'
            }
        }
        success {
            script {
                echo 'Build, push, merge, and deploy successful'
            }
        }
        failure {
            echo 'Build, push, merge, or deploy failed. Rollback performed.'
        }
    }
}

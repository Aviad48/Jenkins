pipeline {
    agent any

    environment {
        GITHUB_APP_CREDENTIALS_ID = '45458158-001d-4fe4-8ca9-8acafca9ff3f'
        GIT_USERNAME = 'aviad48'
        DOCKER_Hub_ID = 'e9cf8a4e-cf95-40f1-a76e-a368ae9cff2f'
        DOCKER_CONTAINER_NAME = 'your_container_name'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/Development']], userRemoteConfigs: [[url: 'https://github.com/Aviad48/Jenkins.git']]])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t aviad539/cicd:${env.BUILD_NUMBER} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_Hub_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """echo \${DOCKER_PASSWORD} | docker login -u \${DOCKER_USERNAME} --password-stdin"""
                        sh "docker push aviad539/cicd:${env.BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    def DOCKER_CONTAINER_NAME = 'my_app'
                    def imageName = "aviad539/cicd:${env.BUILD_NUMBER}"
                    sh "docker run -d --name ${DOCKER_CONTAINER_NAME} ${imageName}"
                }
            }
        }

        stage('Validate Application') {
            steps {
                script {
                    def appStatus = sh(script: "docker inspect --format='{{ .State.Running}}' ${DOCKER_CONTAINER_NAME}", returnStatus: true).trim()

                    if (appStatus != 'running') {
                        error "Application validation failed. Rolling back to the previous version."
                    }
                }
            }
        }

        stage('Auto Merge to Master') {
            steps {
                script {
                    try {
                        // ... (existing merge steps)
                    } catch (Exception e) {
                        error "Error occurred while merging branches: ${e.message}"
                    }
                }
            }
        }

        stage('Manual Deployment') {
            steps {
                script {
                    input "Deploy to Docker Engine?"
                    sh "docker stop ${DOCKER_CONTAINER_NAME}"
                    sh "docker pull ${imageName}"
                    sh "docker run -d --name ${DOCKER_CONTAINER_NAME} ${imageName}"
                }
            }
        }

        stage('Push to Docker Repo') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_Hub_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """echo \${DOCKER_PASSWORD} | docker login -u \${DOCKER_USERNAME} --password-stdin"""
                        sh "docker push aviad539/cicd:${env.BUILD_NUMBER}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                catchError {
                    // Rollback in case of failure
                    echo 'Rolling back to the previous version...'
                    sh "docker stop ${DOCKER_CONTAINER_NAME}"
                    sh "docker run -d --name ${DOCKER_CONTAINER_NAME} aviad539/cicd:previous_version"  // Replace with the actual previous version tag
                }
                sh 'git reset --hard HEAD'
            }
        }
        success {
            script {
                echo 'Build, push, merge, deploy, validation, and push to Docker Repo successful'
            }
        }
        failure {
            echo 'Build, push, merge, deploy, or validation failed. Rollback performed.'
        }
    }
}
